# Правила разработки проекта FindThePuppy

## Общие принципы

### Документирование
- Перед началом каждой операции обращайся к файлу правил
- Документируй все значительные изменения в `/docs/changelog.md`
- Обновляй статус задач в `/docs/tasktracker.md`
- Веди дневник наблюдений в `/docs/diary.md`

### Архитектурные решения
- Следуй архитектуре, описанной в `/docs/project.md`
- Используй TypeScript для всех новых файлов
- Придерживайся принципов SOLID, KISS, DRY
- Создавай компоненты с учетом переиспользования

## Frontend правила

### React/Next.js
- Используй функциональные компоненты с хуками
- Применяй TypeScript для всех компонентов
- Используй App Router для маршрутизации
- Создавай Server Components по умолчанию
- Используй 'use client' только при необходимости

### Стилизация
- Используй Tailwind CSS для всех стилей
- Применяй Shadcn UI компоненты
- Следуй mobile-first подходу
- Обеспечивай доступность (a11y)

### Управление состоянием
- Используй Redux Toolkit для глобального состояния
- Применяй React Hook Form + Zod для форм
- Используй кастомные хуки для переиспользуемой логики

### Производительность
- Используй React.memo() стратегически
- Применяй useCallback и useMemo
- Избегай inline функций в JSX
- Используй code splitting

## Backend правила

### Express.js
- Используй TypeScript для всех файлов
- Следуй структуре папок из архитектуры
- Применяй middleware для общей логики
- Используй валидацию для всех входных данных

### База данных
- Используй PostgreSQL для основной БД
- Применяй миграции для изменений схемы
- Создавай индексы для оптимизации запросов
- Используй транзакции для критических операций

### Безопасность
- Валидируй все входные данные
- Используй bcrypt для хеширования паролей
- Применяй JWT для аутентификации
- Используй rate limiting
- Защищай от XSS и CSRF

## Код стайл

### Общие правила
- Используй tabs для отступов
- Используй одинарные кавычки для строк
- Опускай точку с запятой (кроме случаев дизъюнкции)
- Удаляй неиспользуемые переменные
- Добавляй пробел после ключевых слов
- Добавляй пробел перед скобками в объявлениях функций
- Всегда используй строгое равенство (===)
- Добавляй пробелы вокруг инфиксных операторов
- Добавляй пробел после запятых
- Держи else на той же строке, что и закрывающая скобка
- Используй фигурные скобки для многострочных if
- Всегда обрабатывай параметры ошибок в колбэках
- Ограничивай длину строки до 80 символов
- Используй завершающие запятые в многострочных объектах/массивах

### Именование
- PascalCase для компонентов, типов, интерфейсов
- kebab-case для папок и файлов
- camelCase для переменных, функций, методов, хуков, свойств, пропсов
- UPPERCASE для констант и переменных окружения
- Префикс 'handle' для обработчиков событий
- Префикс глаголов для булевых переменных
- Префикс 'use' для кастомных хуков

## Тестирование

### Unit тесты
- Пиши тесты для всех функций и компонентов
- Используй Jest и React Testing Library
- Следуй паттерну Arrange-Act-Assert
- Мокай внешние зависимости

### Интеграционные тесты
- Фокусируйся на пользовательских сценариях
- Правильно настраивай и очищай тестовую среду
- Используй снапшот-тестирование избирательно
- Используй утилиты тестирования для читаемости

## Деплой и CI/CD

### Git
- Используй Conventional Commits
- Создавай feature branches
- Делай code review перед merge
- Используй pre-commit hooks

### Docker
- Используй multi-stage builds
- Оптимизируй размер образов
- Используй .dockerignore
- Следуй принципам безопасности

## Мониторинг

### Логирование
- Используй Winston для логирования
- Логируй ошибки в Sentry
- Создавай структурированные логи
- Не логируй чувствительные данные

### Метрики
- Отслеживай производительность
- Мониторь ошибки
- Следи за uptime
- Настрой алерты

## Документация

### JSDoc
- Документируй все публичные функции, классы, методы, интерфейсы
- Добавляй примеры где уместно
- Используй полные предложения с правильной пунктуацией
- Держи описания ясными и краткими
- Используй правильное форматирование markdown
- Используй правильные блоки кода
- Используй правильные ссылки
- Используй правильные заголовки
- Используйте правильные списки

## Коммуникация

### Вопросы
- Если не уверен в требованиях, задавай конкретные вопросы
- При предложении вариантов объясняй преимущества и недостатки
- Если задача слишком большая, предлагай разбить на подзадачи
- В конце каждой сессии представляй краткий отчет о прогрессе

### Планирование
- Начинай с пошагового планирования
- Пиши детальный псевдокод перед реализацией
- Документируй архитектуру компонентов и поток данных
- Рассматривай edge cases и сценарии ошибок

## Качество кода

### Читаемость
- Пиши чистый, поддерживаемый и масштабируемый код
- Следуй принципам SOLID
- Предпочитай функциональные и декларативные паттерны программирования
- Подчеркивай типобезопасность и статический анализ
- Практикуй компонентно-ориентированную разработку

### Производительность
- Используй useCallback для мемоизации callback функций
- Применяй useMemo для дорогих вычислений
- Избегай inline определений функций в JSX
- Используй code splitting с динамическими импортами
- Используй правильные key props в списках (избегай index как key)

## Безопасность

### Валидация
- Используй Zod для валидации схем
- Валидируй все входные данные
- Обрабатывай ошибки валидации
- Используй правильные библиотеки форм

### Защита
- Защищай от XSS атак
- Используй DOMPurify для санитизации HTML
- Используй правильные методы аутентификации
- Применяй rate limiting
- Используй HTTPS только

## Доступность

### Основные требования
- Используй семантический HTML для осмысленной структуры
- Применяй точные ARIA атрибуты где нужно
- Обеспечивай полную поддержку навигации с клавиатуры
- Эффективно управляй порядком и видимостью фокуса
- Поддерживай доступные цветовые контрасты
- Следуй логической иерархии заголовков
- Делай все интерактивные элементы доступными
- Предоставляй ясную и доступную обратную связь об ошибках 